<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Interfaz de Bienvenida</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <link rel="stylesheet" href="/public/Css/chat_bot.css">
    <link rel="stylesheet" href="/public/Css/nav.css">
</head>
<body>
    <header>
        <div class="nav-wrapper">
            <div class="logo-container">
                <img src="/public/imagenes/logo.png" width="50" height="50" alt="" class="icon">
                <span class="logo-text">FLORA-NET</span>
            </div>
            <nav>
                <input class="hidden" type="checkbox" id="menuToggle">
                <label class="menu-btn" for="menuToggle">
                    <div class="menu"></div>
                    <div class="menu"></div>
                    <div class="menu"></div>
                </label>
                <div class="nav-container">
                    <ul class="nav-tabs">
                        <li class="nav-tab"><a href="start.html">Inicio</a></li>
                        <li class="nav-tab"><a href="prediccion.html">Predicción</a></li>
                        <li class="nav-tab"><a href="regar.html">Regar</a></li>
                        <li class="nav-tab"><a href="automatizar.html">Automatizar</a></li>
                        <li class="nav-tab"><a href="contact.html">Contactamos</a></li>
                        <li class="nav-tab"><a href="index.html">Cerrar Sesión</a></li>
                    </ul>
                </div>
            </nav>
        </div>
    </header>

    <main>
        <h1 id="welcomeMessage"></h1>
        <p>¿En qué puedo ayudarte hoy?</p>
        <div class="consulta-container">
            <div class="historial">
                <h3>Historial de Búsqueda</h3>
                <ul id="historialBusqueda">
                    <!-- Aquí se agregarán los elementos del historial de búsqueda -->
                </ul>
            </div>
            <div class="resultado">
                <h3>Resultado de la Consulta</h3>
                <pre id="resultadoConsulta"></pre>
            </div>
        </div>

        <section class="buttons">
            <button id="button1" data-question="¿Cada Cuándo la debo regar?">
                <i class="fas fa-lightbulb"></i>
                ¿Cada Cuándo la debo regar?
            </button>
            <button id="button2" data-question="Flores más bonitas del mundo">
                <i class="fas fa-lightbulb"></i>
                Flores más bonitas del mundo
            </button>
            <button id="button3" data-question="Significado de las flores">
                <i class="fas fa-lightbulb"></i>
                Significado de las flores
            </button>
            <button id="button4" data-question="¿Qué tipo de flores debo regalar dependiendo la situación?">
                <i class="fas fa-lightbulb"></i>
                ¿Qué tipo de flores debo regalar dependiendo la situación?
            </button>
        </section>
    </main>

    <section class="error-message" style="display: none;">
        <p id="errorConsulta">Hubo un error. Por favor, inténtalo de nuevo más tarde.</p>
    </section>

    <section>
        <div class="input-container">
            <textarea id="consulta" placeholder="Ingresa una instrucción aquí"></textarea>
            <button class="send-btn" id="botonConsulta"><i class="fas fa-paper-plane"></i> Enviar</button>
        </div>
    </section>

    <!-- Firebase App (modular) -->
    <script type="importmap">
        {
            "imports": {
                "@google/generative-ai": "https://esm.run/@google/generative-ai"
            }
        }
    </script>

    <script type="module">
        import { GoogleGenerativeAI } from "@google/generative-ai";
        import { initializeApp } from "https://www.gstatic.com/firebasejs/10.12.5/firebase-app.js";
        import { getDatabase, ref, push, onValue } from "https://www.gstatic.com/firebasejs/10.12.5/firebase-database.js";

        const firebaseConfig = {
            apiKey: "AIzaSyDVEIzoC2ZLqim7-z1gWiWvTXglc92QbOQ",
            authDomain: "floranet.firebaseapp.com",
            projectId: "floranet",
            storageBucket: "floranet.appspot.com",
            messagingSenderId: "483650882111",
            appId: "1:483650882111:web:688b041cb368a3045dc68a",
            measurementId: "G-TG26MPZHDG",
            databaseURL: "https://floranet-default-rtdb.firebaseio.com/"
        };

        // Inicializar Firebase
        const app = initializeApp(firebaseConfig);
        const db = getDatabase(app);

        const clave = "AIzaSyAWjXwAj9IzPMkJiymAfNBpEq3uxnhGr70";
        const genAI = new GoogleGenerativeAI(clave);
        const model = genAI.getGenerativeModel({ model: "gemini-pro" });

        const palabrasClave = [
            'planta', 'huerto', 'enfermedad', 'riego', 'cuidado', 'agua', 'fertilización', 'sustrato', 'especies',
            'crecimiento', 'cultivo', 'poda', 'flor', 'hoja', 'raíz', 'tierra', 'maceta', 'plántula', 'desinfectante',
            'plagas', 'insectos', 'bichos', 'enfermedades', 'fungicida', 'pesticida', 'calidad', 'temperatura', 'luz',
            'sol', 'sombrero', 'humedad', 'nutrientes', 'mineral', 'biológico', 'orgánico', 'sólido', 'líquido', 'superficie',
            'abono', 'pH', 'polinización', 'reproducción', 'germinación', 'siembra', 'trasplante', 'sombra', 'fotosíntesis',
            'ventilación', 'aire', 'clima', 'temperatura', 'sustento', 'hidratación', 'seca', 'mojado', 'riego automático',
            'mantenimiento', 'adaptación', 'híbrido', 'composición', 'compactación', 'drenaje', 'despunte', 'riego por goteo',
            'reciclaje', 'cosecha', 'plantación', 'fertilizador', 'maleza', 'sistema', 'verde', 'roto', 'tallado', 'pestilencia',
            'enraizamiento', 'control', 'estrés', 'cosecha', 'propagación', 'raíz', 'vegetal', 'hongo', 'muestra', 'márgenes',
            'espacio', 'solidez', 'planta ornamental', 'escarificación', 'savia', 'vegetación', 'planta medicinal', 'herbicida',
            'eco', 'polvo', 'planificación', 'analizar', 'estructura', 'recuperación', 'variedad', 'especies', 'temperatura ambiente',
            'crecimiento rápido', 'planta trepadora', 'hidroponía', 'sustrato', 'técnica', 'cosecha temprana', 'floración',
            'estrategia', 'nutrición', 'aislante', 'ciclo', 'bioma', 'bioma', 'adaptable', 'tendencia', 'tratamiento', 'herbáceo',
            'perenne', 'anual', 'básico', 'secado', 'cultivar', 'abonos orgánicos', 'nutrientes vegetales', 'contaminación', 
            'planta de interior', 'planta de exterior', 'planta de jardín', 'verde intenso', 'poda ligera', 'sano', 'control biológico',
            'tierra fértil', 'bajo riego', 'alto riego', 'agua de lluvia', 'cuidado especial', 'mezcla de tierra', 'nivel de pH',
            'calidad de agua', 'programa de riego', 'planta resistente', 'planta decorativa', 'fertilizante líquido', 'fertilizante sólido',
            'protección', 'revitalización', 'crecimiento saludable', 'planta tropical', 'planta suculenta', 'planta carnívora',
            'planta perenne', 'planta anual', 'planta herbácea', 'planta arbustiva', 'planta trepadora', 'cultivo en invernadero',
            'insecticida', 'planta en maceta', 'planta en suelo', 'planta en hidroponía', 'planta en arena', 'planta en tierra',
            'planta en tierra arcillosa', 'planta en tierra arenosa', 'planta en tierra orgánica', 'tratamiento de suelo', 'recuperación de planta'
        ];

        async function realizarConsulta(consulta) {
            const resultadoConsulta = document.querySelector("#resultadoConsulta");
            const errorConsulta = document.querySelector("#errorConsulta");
            const errorSection = document.querySelector(".error-message");

            desactivarBoton();

            const userId = localStorage.getItem('userId');

            if (!esConsultaValida(consulta)) {
                errorConsulta.textContent = 'Consulta no válida. Por favor, ingresa una pregunta relacionada con plantas, huertos, enfermedades, riego, o cuidados.';
                errorSection.style.display = 'block';

                document.querySelector("#consulta").value = '';
                setTimeout(() => {
                    errorSection.style.display = 'none';
                }, 4000);

                activarBoton();
                return;
            }

            try {
                const result = await model.generateContent(consulta);
                const response = await result.response;
                const text = await response.text();

                resultadoConsulta.innerHTML = formatearTexto(text);
                document.querySelector("#consulta").value = '';

                if (userId) {
                    await guardarConsultaEnFirebase(userId, consulta);
                    mostrarHistorial(userId); // Actualiza el historial después de guardar la consulta
                }
            } catch (error) {
                resultadoConsulta.innerHTML = '';
                errorConsulta.textContent = 'Hubo un problema con la consulta. Por favor, inténtalo de nuevo más tarde.';
                errorSection.style.display = 'block';

                document.querySelector("#consulta").value = '';

                setTimeout(() => {
                    errorSection.style.display = 'none';
                }, 4000);

                console.error("Error al realizar la consulta:", error);
            } finally {
                activarBoton();
            }
        }

        // Validar la consulta
        function esConsultaValida(consulta) {
            return palabrasClave.some(palabra => consulta.toLowerCase().includes(palabra));
        }

        // Guardar consulta en Firebase
        async function guardarConsultaEnFirebase(userId, consulta) {
            const consultasRef = ref(db, consultas/${userId});
            try {
                await push(consultasRef, {
                    consulta: consulta,
                    timestamp: Date.now()
                });
            } catch (error) {
                console.error('Error al guardar la consulta en Firebase:', error.message);
            }
        }

        // Manejador para los botones predefinidos
        document.querySelectorAll('.buttons button').forEach(button => {
            button.addEventListener('click', async (event) => {
                const consulta = event.target.getAttribute('data-question');
                try {
                    if (esConsultaValida(consulta)) {
                        await guardarConsultaEnFirebase(userId, consulta);
                        mostrarHistorial(userId);
                        console.log('Consulta guardada:', consulta);
                    } else {
                        console.error('Consulta no válida:', consulta);
                    }
                } catch (error) {
                    console.error('Error al guardar la consulta:', error.message);
                }
            });
        });

        // Manejador para el textarea y botón de envío
        document.getElementById('botonConsulta').addEventListener('click', async () => {
            const consulta = document.getElementById('consulta').value;
            if (consulta.trim() !== '') {
                try {
                    if (esConsultaValida(consulta)) {
                        await guardarConsultaEnFirebase(userId, consulta);
                        mostrarHistorial(userId);
                        document.getElementById('consulta').value = ''; // Limpiar el textarea
                        console.log('Consulta guardada:', consulta);
                    } else {
                        console.error('Consulta no válida:', consulta);
                    }
                } catch (error) {
                    console.error('Error al guardar la consulta:', error.message);
                }
            }
        });

        // Mostrar historial de búsquedas
        function mostrarHistorial(userId) {
            const consultasRef = ref(db, consultas/${userId});
            const historialBusqueda = document.getElementById('historialBusqueda');
            historialBusqueda.innerHTML = '';

            onValue(consultasRef, (snapshot) => {
                historialBusqueda.innerHTML = '';
                snapshot.forEach((childSnapshot) => {
                    const data = childSnapshot.val();
                    const consulta = data.consulta;
                    const timestamp = data.timestamp;
                    const fecha = new Date(timestamp).toLocaleString();

                    const listItem = document.createElement('li');
                    listItem.textContent = ${consulta} - ${fecha};
                    historialBusqueda.appendChild(listItem);
                });
            });
        }

        // Obtener datos del usuario desde localStorage
        const user = JSON.parse(localStorage.getItem('user'));
        const { userName, userId } = user || {};

        // Mostrar el mensaje de bienvenida
        const welcomeMessage = document.getElementById('welcomeMessage');
        if (userName) {
            welcomeMessage.textContent = Hola, ${userName};
        }

        // Cargar el historial de búsquedas al cargar la página
        window.addEventListener('DOMContentLoaded', () => {
            if (userId) {
                mostrarHistorial(userId);
            }
        });

        document.querySelector("#button1").addEventListener("click", () => {
            const consulta = document.querySelector("#button1").getAttribute("data-question");
            realizarConsulta(consulta);
        });

        document.querySelector("#button2").addEventListener("click", () => {
            const consulta = document.querySelector("#button2").getAttribute("data-question");
            realizarConsulta(consulta);
        });

        document.querySelector("#button3").addEventListener("click", () => {
            const consulta = document.querySelector("#button3").getAttribute("data-question");
            realizarConsulta(consulta);
        });

        document.querySelector("#button4").addEventListener("click", () => {
            const consulta = document.querySelector("#button4").getAttribute("data-question");
            realizarConsulta(consulta);
        });

        document.querySelector("#botonConsulta").addEventListener("click", () => {
            const consulta = document.querySelector("#consulta").value;
            realizarConsulta(consulta);
        });

        function desactivarBoton() {
            const botonConsulta = document.querySelector("#botonConsulta");
            botonConsulta.disabled = true;
            botonConsulta.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Consultando...';
        }

        function activarBoton() {
            const botonConsulta = document.querySelector("#botonConsulta");
            botonConsulta.disabled = false;
            botonConsulta.innerHTML = '<i class="fas fa-paper-plane"></i> Enviar';
        }

        function formatearTexto(texto) {
            return texto;
        }
    </script>
</body>
</html>



<!DOCTYPE html>
<html lang="es">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Interfaz de Bienvenida</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <link rel="stylesheet" href="/public/Css/chat_bot.css"> <!-- Asegúrate de tener este archivo con tu estilo -->
    <link rel="stylesheet" href="/public/Css/nav.css"> <!-- Asegúrate de tener este archivo con tu estilo -->
</head>

<body>
    <header>
        <div class="nav-wrapper"> <!-- Contenedor principal para la barra de navegación -->
            <div class="logo-container"> <!-- Contenedor para el logotipo y el texto del logotipo -->
                <img src="/public/imagenes/logo.png" width="50" height="50" alt="" class="icon"> <!-- Imagen del logotipo -->
                <span class="logo-text">FLORA-NET</span> <!-- Texto del logotipo -->
            </div>
            <nav>
                <input class="hidden" type="checkbox" id="menuToggle"> <!-- Checkbox oculto para alternar el menú de navegación en dispositivos móviles -->
                <label class="menu-btn" for="menuToggle"> <!-- Etiqueta que actúa como botón de menú, vinculada al checkbox -->
                    <div class="menu"></div> <!-- Línea superior del botón de menú -->
                    <div class="menu"></div> <!-- Línea central del botón de menú -->
                    <div class="menu"></div> <!-- Línea inferior del botón de menú -->
                </label>
                <div class="nav-container"> <!-- Contenedor de navegación, visible en pantallas pequeñas -->
                    <ul class="nav-tabs">
                        <li class="nav-tab"><a href="start.html">Inicio</a></li>
                        <li class="nav-tab"><a href="prediccion.html">Predicción</a></li>
                        <li class="nav-tab"><a href="regar.html">Regar</a></li>
                        <li class="nav-tab"><a href="automatizar.html">Automatizar</a></li>
                        <li class="nav-tab"><a href="contact.html">Contactamos</a></li>
                        <li class="nav-tab"><a href="index.html">Cerrar Sesión</a></li>
                    </ul>
                </div>
            </nav>
        </div>
    </header>
    
    <main>
        <h1 id="welcomeMessage"></h1>
        <p>¿En qué puedo ayudarte hoy?</p>
        <div class="consulta-container">
            <div class="historial">
                <h3>Historial de Búsqueda</h3>
                <ul id="historialBusqueda">
                    <!-- Aquí se agregarán los elementos del historial de búsqueda -->
                </ul>
            </div>
            <div class="resultado">
                <h3>Resultado de la Consulta</h3>
                <pre id="resultadoConsulta"></pre> <!-- Muestra los resultados de la consulta -->
            </div>
        </div>

        <section class="buttons">
            <button id="button1" data-question="¿Cada Cuándo la debo regar?">
                <i class="fas fa-lightbulb"></i>
                ¿Cada Cuándo la debo regar?
            </button>
            <button id="button2" data-question="Flores más bonitas del mundo">
                <i class="fas fa-lightbulb"></i>
                Flores más bonitas del mundo
            </button>
            <button id="button3" data-question="Significado de las flores">
                <i class="fas fa-lightbulb"></i>
                Significado de las flores
            </button>
            <button id="button4" data-question="¿Qué tipo de flores debo regalar dependiendo la situación?">
                <i class="fas fa-lightbulb"></i>
                ¿Qué tipo de flores debo regalar dependiendo la situación?
            </button>
        </section>
    </main>

    <section class="error-message" style="display: none;">
        <p id="errorConsulta">Hubo un error. Por favor, inténtalo de nuevo más tarde.</p>
    </section>

    <section>
        <div class="input-container">
            <textarea id="consulta" placeholder="Ingresa una instrucción aquí"></textarea>
            <button class="send-btn" id="botonConsulta"><i class="fas fa-paper-plane"></i> Enviar</button>
        </div>
    </section>

    <footer>
        <p>Revisores humanos analizan algunos chats guardados para mejorar la IA de Google. Para evitar esto puedes optar por futuras inhabilitaciones...</p>
    </footer>

    <script type="importmap">
        {
            "imports": {
                "@google/generative-ai": "https://esm.run/@google/generative-ai"
            }
        }
    </script>

    <script type="module">
        import { GoogleGenerativeAI } from "@google/generative-ai";

        const clave = ""; // Inserta tu clave API aquí
        const genAI = new GoogleGenerativeAI(clave);
        const model = genAI.getGenerativeModel({ model: "gemini-pro" });

        // Función para manejar la consulta al chatbot, reutilizable por cualquier botón
        async function realizarConsulta(consulta) {
            const resultadoConsulta = document.querySelector("#resultadoConsulta");
            const errorConsulta = document.querySelector("#errorConsulta");
            const errorSection = document.querySelector(".error-message");

            desactivarBoton();

            try {
                const result = await model.generateContent(consulta);
                const response = await result.response;
                const text = await response.text();

                resultadoConsulta.innerHTML = formatearTexto(text);
                document.querySelector("#consulta").value = ''; // Limpia el contenido del textarea después de recibir la respuesta
            } catch (error) {
                resultadoConsulta.innerHTML = '';
                errorConsulta.textContent = 'Hubo un problema con la consulta. Por favor, inténtalo de nuevo más tarde.';
                errorSection.style.display = 'block';

                document.querySelector("#consulta").value = '';

                setTimeout(() => {
                    errorSection.style.display = 'none';
                }, 4000);

                console.error("Error al realizar la consulta:", error);
            } finally {
                activarBoton();
            }
        }

        // Añadir eventos de clic a los botones de opciones predefinidas
        document.querySelector("#button1").addEventListener("click", () => {
            const consulta = document.querySelector("#button1").getAttribute("data-question");
            realizarConsulta(consulta);
        });

        document.querySelector("#button2").addEventListener("click", () => {
            const consulta = document.querySelector("#button2").getAttribute("data-question");
            realizarConsulta(consulta);
        });

        document.querySelector("#button3").addEventListener("click", () => {
            const consulta = document.querySelector("#button3").getAttribute("data-question");
            realizarConsulta(consulta);
        });

        document.querySelector("#button4").addEventListener("click", () => {
            const consulta = document.querySelector("#button4").getAttribute("data-question");
            realizarConsulta(consulta);
        });

        // Manejador para el botón de consulta principal
        document.querySelector("#botonConsulta").addEventListener("click", () => {
            const consulta = document.querySelector("#consulta").value;
            realizarConsulta(consulta);
        });

        // Función para desactivar el botón de consulta y mostrar el estado de "Consultando..."
        function desactivarBoton() {
            const botonConsulta = document.querySelector("#botonConsulta");
            botonConsulta.disabled = true;
            botonConsulta.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Consultando...';
        }

        // Función para activar el botón de consulta y volver a su estado normal
        function activarBoton() {
            const botonConsulta = document.querySelector("#botonConsulta");
            botonConsulta.disabled = false;
            botonConsulta.innerHTML = '<i class="fas fa-paper-plane"></i> Enviar';
        }

        // Función para formatear el texto reemplazando los asteriscos con negritas HTML
        function formatearTexto(texto) {
            return texto.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
        }

        // Función para extraer el parámetro 'flor' de la URL y establecerlo en el textarea
        function setConsultaFromURL() {
            const urlParams = new URLSearchParams(window.location.search);
            const flor = urlParams.get('flor');
            if (flor) {
                document.querySelector("#consulta").value = `Información sobre ${flor}`;
                document.querySelector("#botonConsulta").click();
            }
        }

        // Configuración inicial al cargar la página
        window.addEventListener('DOMContentLoaded', () => {
            setConsultaFromURL();

            const userName = localStorage.getItem('userName');
            if (userName) {
                const welcomeMessage = document.getElementById('welcomeMessage');
                welcomeMessage.textContent = `Hola, ${userName}`;
                welcomeMessage.style.fontSize = '2.5em';
            }
        });
    </script>
</body>

</html>
